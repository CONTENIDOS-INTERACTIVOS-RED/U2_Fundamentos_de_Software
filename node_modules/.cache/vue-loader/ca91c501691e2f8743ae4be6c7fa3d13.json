{"remainingRequest":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/src/views/curso/Tema1.vue?vue&type=template&id=7fb52103&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/src/views/curso/Tema1.vue","mtime":1758494003885},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gUHJpbmNpcGlvcyBkZSBkaXNlw7FvIChjb2hlc2nDs24sIGFjb3BsYW1pZW50bywgbW9kdWxhcmlkYWQpJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC5iZy1jb2xvci0xMC5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzEucG5nJywgYWx0PScnKQogICAgICAgIC5jb2wtbGcKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgRWwgZGlzZcOxbyBkZSA8ZW0+c29mdHdhcmU8L2VtPiwgY29uc3RpdHV5ZSB1biBwaWxhciBlc2VuY2lhbCBlbiBlbCBkZXNhcnJvbGxvIGRlIHNpc3RlbWFzIHRlY25vbMOzZ2ljb3MgcXVlIHNlYW4gZnVuY2lvbmFsZXMsIGVzY2FsYWJsZXMgeSBkZSBmw6FjaWwgbWFudGVuaW1pZW50by4gQXBsaWNhciBwcmluY2lwaW9zIHPDs2xpZG9zIGNvbW8gY29oZXNpw7NuLCBhY29wbGFtaWVudG8geSBtb2R1bGFyaWRhZCwgYXNlZ3VyYSBxdWUgbGFzIHNvbHVjaW9uZXMgY3VtcGxhbiBjb24gbG9zIG9iamV0aXZvcyBhY3R1YWxlcyB5IHB1ZWRhbiBhZGFwdGFyc2UgYSBuZWNlc2lkYWRlcyBmdXR1cmFzLiBBIGNvbnRpbnVhY2nDs24sIHNlIGRldGFsbGEgY2FkYSB1bm8gZGUgZXN0b3MgcHJpbmNpcGlvcywgZGVzdGFjYW5kbyBzdSBzaWduaWZpY2FkbywgaW1wb3J0YW5jaWEsIGJlbmVmaWNpb3MgeSBhcGxpY2FjaW9uZXMgcHLDoWN0aWNhcy4KICAgIAogICAgaDIubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpIFByaW5jaXBpbyBkZSBjb2hlc2nDs24gZW4gZWwgZGlzZcOxbyBkZSA8ZW0+c29mdHdhcmU8L2VtPgoKICAgIC5yb3cubWItNS5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAuY29sLW1kLTguY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMi5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci0xCiAgICAgICAgLmJnLWNvbG9yLTEucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi0zLm1iLWxnLTAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYSBjb2hlc2nDs24gbWlkZSBlbCBuaXZlbCBkZSByZWxhY2nDs24gZW50cmUgbGFzIHJlc3BvbnNhYmlsaWRhZGVzIGRlbnRybyBkZSB1biBtw7NkdWxvLiBVbiBtw7NkdWxvIGNvaGVzaXZvIGNvbmNlbnRyYSBmdW5jaW9uZXMgeSBkYXRvcyBxdWUgdHJhYmFqYW4gZW4gY29uanVudG8sIHBhcmEgdW4gcHJvcMOzc2l0byDDum5pY28uIEVzdGUgcHJpbmNpcGlvIG1lam9yYSBsYSBtYW50ZW5pYmlsaWRhZCwgZXNjYWxhYmlsaWRhZCB5IGNvbXByZW5zacOzbiBkZWwgPGVtPnNvZnR3YXJlPC9lbT4uCiAgICAgIAogICAgaDIubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpIERlZmluaWNpw7NuIHkgcHJvcMOzc2l0byBkZSBsYSBjb2hlc2nDs24KCiAgICBwLm1iLTUgTGEgY29oZXNpw7NuIGV2YWzDumEgcXXDqSB0YW4gcmVsYWNpb25hZGFzIGVzdMOhbiBsYXMgcGFydGVzIGRlIHVuIG3Ds2R1bG8uIEVuIHVuIGRpc2XDsW8gY29oZXNpdm8sIGZ1bmNpb25lcyB5IGRhdG9zIGVzdMOhbiBhbGluZWFkb3MgY29uIHVuIG9iamV0aXZvIMO6bmljbywgbG8gcXVlIGVsaW1pbmEgcmVzcG9uc2FiaWxpZGFkZXMgZGlzcGVyc2FzLiBVbiBtw7NkdWxvIGNvaGVzaXZvOgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wKGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgICBkaXYuYmctY29sb3ItNS5oLTEwMC5wLTQudGFyamV0YQogICAgICAgICAgaDIgMDEKICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciA8Yj5UaWVuZSB1biBwcm9ww7NzaXRvIGNsYXJvOiA8L2I+IGNhZGEgZnVuY2nDs24gY29udHJpYnV5ZSBhIHVuIG9iamV0aXZvIGNvbcO6bi4KICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMChkYXRhLWFvcz0iZmFkZS1kb3duIikKICAgICAgICBkaXYuYmctY29sb3ItNC5oLTEwMC5wLTQudGFyamV0YQogICAgICAgICAgaDIgMDIKICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciA8Yj5SZWR1Y2UgbGEgY29tcGxlamlkYWQgaW50ZXJuYTogPC9iPiBhbCBlbmZvY2Fyc2UgZW4gdGFyZWFzIGVzcGVjw61maWNhcywgbWluaW1pemEgaW50ZXJhY2Npb25lcyBpbm5lY2VzYXJpYXMuCiAgICAgIC5jb2wtbGctNChkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgZGl2LmJnLWNvbG9yLTUuaC0xMDAucC00LnRhcmpldGEKICAgICAgICAgIGgyIDAzCiAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgPGI+RmFjaWxpdGEgZWwgbWFudGVuaW1pZW50bzogPC9iPiBkZWxpbWl0YSDDoXJlYXMgZGUgdHJhYmFqbyBjbGFyYXMuCiAgICAKICAgICN0XzFfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjFdIFRpcG9zIGRlIGNvaGVzacOzbgoKICAgIHAubWItNSBMYSBjb2hlc2nDs24gc2UgY2xhc2lmaWNhIGVuIHVuYSBlc2NhbGEgZGUgYmFqYSBhIGFsdGEsIHNlZ8O6biBsYSByZWxhY2nDs24gZW50cmUgbG9zIGVsZW1lbnRvcyBkZWwgbcOzZHVsbzoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby0yCiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgICAgICAuY29sLWxnLTgub3JkZXItMgogICAgICAgICAgICBTbHlkZXJGKGNvbHVtbmFzPSJjb2wtMTIgY29sLWxnLTYiKShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgCiAgICAgICAgICAgICAgLnJvdy5weS00LnB4LTMuaC0xMDAKICAgICAgICAgICAgICAgIC5jb2wtMTAub2Zmc2V0LTEub2Zmc2V0LW1kLTAuY29sLW1kLTEyLnNoYWRvdy1hcHAucC0zLnB5LW1kLTUucHgtbWQtNC5iZy04LnRhcmpldGEuYmctY29sb3Itd2hpdGUKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvNS5zdmcnIGFsdD0nQXZhdGFyVG9wJyAsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBDb2hlc2nDs24gY29pbmNpZGVudGUKICAgICAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIExvcyBlbGVtZW50b3MgZXN0w6FuIGFncnVwYWRvcyBzaW4gcmVsYWNpw7NuIGNsYXJhLiAKICAgICAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIDxiPkVqZW1wbG86PC9iPiB1biBtw7NkdWxvIHF1ZSBnZXN0aW9uYSB1c3VhcmlvcywgY2FsY3VsYSBwcmVjaW9zIHkgcHJvY2VzYSBwYWdvcy4gCiAgICAgICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciA8Yj5JbXBhY3RvOjwvYj4gZGlmaWN1bHRhIGVsIG1hbnRlbmltaWVudG8geSBjb21wcmVuc2nDs24uCiAgIAogICAgICAgICAgICAgIC5yb3cucHktNC5weC0zLmgtMTAwCiAgICAgICAgICAgICAgICAuY29sLTEwLm9mZnNldC0xLm9mZnNldC1tZC0wLmNvbC1tZC0xMi5zaGFkb3ctYXBwLnAtMy5weS1tZC01LnB4LW1kLTQuYmctOC50YXJqZXRhLmJnLWNvbG9yLXdoaXRlCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzYuc3ZnJyBhbHQ9J0F2YXRhclRvcCcgLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgQ29oZXNpw7NuIGzDs2dpY2EKICAgICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlci5tYi0wIExvcyBlbGVtZW50b3MgcmVhbGl6YW4gdGFyZWFzIHNpbWlsYXJlcywgcGVybyBubyBlc3TDoW4gY29uZWN0YWRvcyBmdW5jaW9uYWxtZW50ZS4gIAogICAgICAgICAgICAgICAgICBwLnRleHQtY2VudGVyLm1iLTAgPGI+RWplbXBsbzo8L2I+IHVuIG3Ds2R1bG8gcGFyYSBsZWVyLCBlc2NyaWJpciB5IG1vZGlmaWNhciBkaWZlcmVudGVzIHRpcG9zIGRlIGFyY2hpdm9zLgogICAgICAgICAgICAgIC5yb3cucHktNC5weC0zLmgtMTAwCiAgICAgICAgICAgICAgICAuY29sLTEwLm9mZnNldC0xLm9mZnNldC1tZC0wLmNvbC1tZC0xMi5zaGFkb3ctYXBwLnAtMy5weS1tZC01LnB4LW1kLTQuYmctOC50YXJqZXRhLmJnLWNvbG9yLXdoaXRlCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzcuc3ZnJyBhbHQ9J0F2YXRhclRvcCcgLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgQ29oZXNpw7NuIHRlbXBvcmFsCiAgICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIubWItMCBBZ3J1cGEgZnVuY2lvbmVzIHBvciBlamVjdWNpw7NuIGVuIGxhIG1pc21hIHNlY3VlbmNpYSB0ZW1wb3JhbC4gCiAgICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIubWItMCA8Yj5FamVtcGxvOjwvYj4gaW5pY2lhbGl6YWNpw7NuIGRlIHZhcmlhYmxlcyB5IGFwZXJ0dXJhIGRlIGNvbmV4aW9uZXMuCiAgICAgICAgICAgICAgLnJvdy5weS00LnB4LTMuaC0xMDAKICAgICAgICAgICAgICAgIC5jb2wtMTAub2Zmc2V0LTEub2Zmc2V0LW1kLTAuY29sLW1kLTEyLnNoYWRvdy1hcHAucC0zLnB5LW1kLTUucHgtbWQtNC5iZy04LnRhcmpldGEuYmctY29sb3Itd2hpdGUKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvOC5zdmcnIGFsdD0nQXZhdGFyVG9wJyAsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBDb2hlc2nDs24gZnVuY2lvbmFsCiAgICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIubWItMCBUb2RvcyBsb3MgZWxlbWVudG9zIHRyYWJhamFuIGVuIGNvbmp1bnRvLCBwYXJhIHVuYSB0YXJlYSBlc3BlY8OtZmljYSAKICAgICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlci5tYi0wIDxiPkVqZW1wbG86PC9iPiB1biBtw7NkdWxvIHF1ZSBnZXN0aW9uYSByZXNlcnZhcyBlbiB1biBob3RlbC4gICAgICAgICAKCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS80LnBuZycsIGFsdD0nJykKICAgIAogICAgICAgIGgyLm1iLTMoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBJbXBvcnRhbmNpYSBkZSBsYSBjb2hlc2nDs24gZW4gZWwgZGlzZcOxbyBkZSA8ZW0+c29mdHdhcmU8L2VtPgoKICAgICAgICBwLm1iLTUgTGEgY29oZXNpw7NuIGltcGFjdGEgZGlyZWN0YW1lbnRlIGxhIGNhbGlkYWQgZGVsIGRpc2XDsW8uIExvcyBiZW5lZmljaW9zIGluY2x1eWVuOgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIuYmctaDg1Lm1iLTUKICAgICAgLmNvbC1sZy0xMgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgb2wubGlzdGEtb2wtLWN1YWRybyhkYXRhLWFvcz0iZmFkZS11cCIpLm1iLTAKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleC5wLTIKICAgICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgICAgc3BhbiAxCiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+RmFjaWxpZGFkIGRlIGNvbXByZW5zacOzbjogPC9iPiBsb3MgbcOzZHVsb3MgY29oZXNpdm9zIHNvbiBjbGFyb3MgeSBmw6FjaWxlcyBkZSBlbnRlbmRlci4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleC5wLTIgCiAgICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICAgIHNwYW4gMgogICAgICAgICAgICAgICAgcC5tYi0wIDxiPk1hbnRlbmltaWVudG8gb3B0aW1pemFkbzo8L2I+IHN1cyByZXNwb25zYWJpbGlkYWRlcyBiaWVuIGRlZmluaWRhcywgZmFjaWxpdGFuIG1vZGlmaWNhY2lvbmVzLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4LnAtMiAKICAgICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgICAgc3BhbiAzCiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+UmV1dGlsaXphY2nDs24gZGUgY8OzZGlnbzogPC9iPnB1ZWRlbiBleHRyYWVyc2UgeSB1dGlsaXphcnNlIGVuIG90cm9zIHByb3llY3Rvcy4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleC5wLTIgCiAgICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICAgIHNwYW4gNAogICAgICAgICAgICAgICAgcC5tYi0wIDxiPlJlZHVjY2nDs24gZGUgZXJyb3JlczogIDwvYj4gc2UgbWluaW1pemFuIGludGVyYWNjaW9uZXMgY29tcGxlamFzLCBxdWUgcHJvdm9jYW4gZmFsbG9zLgogICAgICAgICAgLmNvbC1sZy01KGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgaW1nLmltZy1mbHVpZChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzkuc3ZnJywgc3R5bGU9Im1heC13aWR0aDo0ODZweCIsIGFsdD0iIikubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubWItNC5tYi1sZy0wCgogICAgaDIubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEPDs21vIGxvZ3JhciBhbHRhIGNvaGVzacOzbgoKICAgIHAubWItNSBMb2dyYXIgYWx0YSBjb2hlc2nDs24gcmVxdWllcmUgZXN0cmF0ZWdpYXMgZXNwZWPDrWZpY2FzOgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTMKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAudGFyamV0YQogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTAuc3ZnIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIHAudGV4dC1ib2xkLnRleHQtY2VudGVyIERlZmluaXIgZWwgcHJvcMOzc2l0byBkZWwgbcOzZHVsbwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBJZGVudGlmaWNhciBjbGFyYW1lbnRlIHN1IG9iamV0aXZvLgogICAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMC50YXJqZXRhCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KAogICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMS5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgcC50ZXh0LWJvbGQudGV4dC1jZW50ZXIgRXZpdGFyIGFncmVnYXIgZnVuY2lvbmVzIG5vIHJlbGFjaW9uYWRhcwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBEaXN0cmlidWlyIHJlc3BvbnNhYmlsaWRhZGVzIGVudHJlIG3Ds2R1bG9zIGRpc3RpbnRvcy4KICAgICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAudGFyamV0YQogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTIuc3ZnIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIHAudGV4dC1ib2xkLnRleHQtY2VudGVyIEFwbGljYXIgcHJpbmNpcGlvcyBkZSBkaXNlw7FvIFNPTElECiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEVuIGVzcGVjaWFsLCBlbCBwcmluY2lwaW8gZGUgcmVzcG9uc2FiaWxpZGFkIMO6bmljYS4KICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwLnRhcmpldGEKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzEzLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgICBwLnRleHQtYm9sZC50ZXh0LWNlbnRlciBSZXZpc2FyIHkgcmVmYWN0b3JpemFyCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEFzZWd1cmFyIHF1ZSBjYWRhIGZ1bmNpw7NuIGNvbnRyaWJ1eWEgYWwgcHJvcMOzc2l0byBkZWwgbcOzZHVsby4KCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5iZy1oODUtMi5tYi01CiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTcoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTMubWItbGctMAogICAgICAgICAgICAgICAgcC50ZXh0LWJvbGQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFamVtcGxvIHByw6FjdGljbzogY29oZXNpw7NuIGVuIHVuIHNpc3RlbWEgZGUgZ2VzdGnDs24gZXNjb2xhcgogICAgICAgICAgICAgICAgcC5tYi0wIFVuIG3Ds2R1bG8gY29oZXNpdm8gcGFyYSBsYSBnZXN0acOzbiBkZSBlc3R1ZGlhbnRlcyBpbmNsdWlyw61hIGZ1bmNpb25lcyBjb21vIHJlZ2lzdHJhciBpbmZvcm1hY2nDs24sIGFjdHVhbGl6YXIgZGF0b3MgeSBjb25zdWx0YXIgY2FsaWZpY2FjaW9uZXMuIEVuIGNhbWJpbywgdW4gbcOzZHVsbyBubyBjb2hlc2l2byBxdWUgaW5jbHV5YSBhc2lnbmFyIGhvcmFyaW9zIGEgcHJvZmVzb3JlcyBvIHByb2Nlc2FyIHBhZ29zIGRlIG1hdHLDrWN1bGEsIHNlcsOtYSBkaWbDrWNpbCBkZSBtYW50ZW5lci4KICAgICAgICAgICAgICAuY29sLWxnLTUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgICAgaW1nLmltZy1mbHVpZChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzE0LnN2ZycsIHN0eWxlPSJtYXgtd2lkdGg6NDg2cHgiLCBhbHQ9IiIpLm14LWF1dG8ubXgtbGctMC5tcy1sZy1hdXRvLm1iLTQubWItbGctMAogICAgCiAgICBwLm1iLTUgTGEgY29oZXNpw7NuIGZvbWVudGEgY2xhcmlkYWQsIHNvc3RlbmliaWxpZGFkIHkgbWVqb3JhIGxhIGNvbGFib3JhY2nDs24gZW4gZXF1aXBvLiBEaXNlw7FhciBtw7NkdWxvcyBjb2hlc2l2b3MgZ2FyYW50aXphIHF1ZSBlbCBzaXN0ZW1hIHB1ZWRhIGV2b2x1Y2lvbmFyIGbDoWNpbG1lbnRlLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTkubWIKICAgICAgLnB4LTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy04Lm9yZGVyLTIKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIFByaW5jaXBpbyBkZSBhY29wbGFtaWVudG8gZW4gZWwgZGlzZcOxbyBkZSA8ZW0+c29mdHdhcmU8L2VtPgogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbCBkb2N1bWVudG8gc2UgY2VudHJhIGVuIGVsIHByaW5jaXBpbyBkZSBhY29wbGFtaWVudG8gZW4gZWwgZGlzZcOxbyBkZSA8ZW0+c29mdHdhcmU8L2VtPiwgZGVzdGFjYW5kbyBzdSBpbXBvcnRhbmNpYSBwYXJhIGxvZ3JhciBzaXN0ZW1hcyBtb2R1bGFyZXMsIG1hbnRlbmlibGVzIHkgZXNjYWxhYmxlcy4gU2UgZGVzY3JpYmVuIGxvcyBuaXZlbGVzIGRlIGFjb3BsYW1pZW50bywgZGVzZGUgZWwgaWRlYWwgZGVzYWNvcGxhbWllbnRvIGNvbXBsZXRvIGhhc3RhIGVsIG1lbm9zIGRlc2VhYmxlIGFjb3BsYW1pZW50byBkZSBjb250ZW5pZG8sIG9mcmVjaWVuZG8gZWplbXBsb3MgcGFyYSBpbHVzdHJhciBjYWRhIHRpcG8uCgogICAgICAgICAgICBhLmFuZXhvLm1iLTQuYmctd2hpdGUudy1maXQoOmhyZWY9Im9idGVuZXJMaW5rKCcvZG93bmxvYWRzL0FuZXhvXzEucGRmJykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXBkZi5zdmciKQogICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgIHAgPHN0cm9uZz5BbmV4by4gPC9zdHJvbmc+IFByaW5jaXBpbyBkZSBhY29wbGFtaWVudG8gZW4gZWwgZGlzZcOxbyBkZSA8ZW0+c29mdHdhcmU8L2VtPi4KCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTQub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNS5wbmcnLCBhbHQ9JycpCiAgICAKCiAgICAjdF8xXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKS5tdC01CiAgICAgIGgyICNbc3BhbiAxLjJdIFByaW5jaXBpbyBkZSBtb2R1bGFyaWRhZCBlbiBlbCBkaXNlw7FvIGRlIDxlbT5zb2Z0d2FyZTwvZW0+CgogICAgLnJvdy5tYi01Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgIC5jb2wtbWQtOC5jb2wtbGctNC5vcmRlci0yCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNi5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci0xCiAgICAgICAgcCBFbCBwcmluY2lwaW8gZGUgbW9kdWxhcmlkYWQgZXMgdW4gZW5mb3F1ZSBlc2VuY2lhbCBlbiBlbCBkaXNlw7FvIGRlIDxlbT5zb2Z0d2FyZTwvZW0+LCBxdWUgYnVzY2EgZGl2aWRpciB1biBzaXN0ZW1hIGNvbXBsZWpvIGVuIHBhcnRlcyBtw6FzIHBlcXVlw7FhcyB5IG1hbmVqYWJsZXMsIGxsYW1hZGFzIG3Ds2R1bG9zLiBDYWRhIG3Ds2R1bG8gdGllbmUgdW5hIGZ1bmNpw7NuIGVzcGVjw61maWNhIHkgZXN0w6EgZGlzZcOxYWRvIHBhcmEgc2VyIGluZGVwZW5kaWVudGUgbywgYWwgbWVub3MsIHBhcmEgbWFudGVuZXIgdW5hIGRlcGVuZGVuY2lhIG3DrW5pbWEgY29uIG90cm9zIG3Ds2R1bG9zLiBFc3RlIGVuZm9xdWUgZmFjaWxpdGEgZWwgZGVzYXJyb2xsbywgbWFudGVuaW1pZW50byB5IGV2b2x1Y2nDs24gZGVsIDxlbT5zb2Z0d2FyZTwvZW0+LCBtZWpvcmFuZG8gc3UgY2FsaWRhZC4KICAgICAgICAuYmctY29sb3ItMS5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTMubWItbGctMAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTcuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYSBtb2R1bGFyaWRhZCBzZSBkZWZpbmUgY29tbyBsYSBjYXBhY2lkYWQgZGUgdW4gc2lzdGVtYSBwYXJhIGRpdmlkaXJzZSBlbiBjb21wb25lbnRlcyBmdW5jaW9uYWxlcyBhdXTDs25vbW9zLCBxdWUgdHJhYmFqYW4ganVudG9zIHBhcmEgY3VtcGxpciBsb3Mgb2JqZXRpdm9zIGdlbmVyYWxlcy4gVW4gbcOzZHVsbyBlcyB1bmEgdW5pZGFkIGzDs2dpY2EsIGNvbmNlcHR1YWwgbyBmw61zaWNhLCBxdWUgYWdydXBhIGVsZW1lbnRvcyByZWxhY2lvbmFkb3MsIGNvbW8gZnVuY2lvbmVzLCBkYXRvcyBvIGNsYXNlcywgeSBvcGVyYSBjb21vIHVuYSBlbnRpZGFkIHNlcGFyYWRhLgogICAgCiAgICBoMi5tYi0zKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgUHJvcGllZGFkZXMgY2xhdmVzIGRlIHVuIG3Ds2R1bG8KCiAgICBwLm1iLTUgTG9zIG3Ds2R1bG9zIHNvbiBjb21wb25lbnRlcyBlc2VuY2lhbGVzIGVuIGVsIGRlc2Fycm9sbG8gZGUgc2lzdGVtYXMsIGRlZmluaWRvcyBwb3IgcHJvcGllZGFkZXMgY2xhdmVzIHF1ZSBhc2VndXJhbiBzdSBmdW5jaW9uYWxpZGFkIHkgZWZpY2llbmNpYS4KCiAgICAuYmctZnVsbC13aWR0aC0xLmJnLWZvbmRvLTIKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTMKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xOC5zdmciLCBkYXRhLWFvcz0iem9vbS1pbiIpIAogICAgICAgIAogICAgICAgIGgyLm1iLTMoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBJbXBvcnRhbmNpYSBkZSBsYSBtb2R1bGFyaWRhZAoKICAgICAgICBwLm1iLTUgTGEgbW9kdWxhcmlkYWQgZXMgdW4gcHJpbmNpcGlvIGNsYXZlIGVuIGVsIGRlc2Fycm9sbG8gZGUgc2lzdGVtYXMsIHBvciBsb3MgbcO6bHRpcGxlcyBiZW5lZmljaW9zIHF1ZSBhcG9ydGEuCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIuYmctaDg1LTQubWItNQogICAgICAgICAgLmNvbC1sZy0xMgogICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgLmNvbC1sZy03KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICAgICAgb2wubGlzdGEtb2wtLWN1YWRybyhkYXRhLWFvcz0iZmFkZS11cCIpLm1iLTAKICAgICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgucC0yCiAgICAgICAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgICAgICAgICAgc3BhbiAxCiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPk1hbnRlbmliaWxpZGFkOiA8L2I+IGZhY2lsaXRhIGxhIGxvY2FsaXphY2nDs24geSBjb3JyZWNjacOzbiBkZSBlcnJvcmVzLCBhZGVtw6FzIGRlIGltcGxlbWVudGFyIGNhbWJpb3MuCiAgICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4LnAtMiAKICAgICAgICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICAgICAgICBzcGFuIDIKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgPGI+UmV1dGlsaXphY2nDs246IDwvYj4gbG9zIG3Ds2R1bG9zIGJpZW4gZGlzZcOxYWRvcyBwdWVkZW4gdXRpbGl6YXJzZSBlbiBvdHJvcyBwcm95ZWN0b3MgbyBwYXJ0ZXMgZGVsIHNpc3RlbWEsIGFob3JyYW5kbyB0aWVtcG8geSBlc2Z1ZXJ6by4KICAgICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgucC0yIAogICAgICAgICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgICAgICAgIHNwYW4gMwogICAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5Fc2NhbGFiaWxpZGFkOiA8L2I+cGVybWl0ZSBhZ3JlZ2FyIG51ZXZhcyBmdW5jaW9uYWxpZGFkZXMgc2luIHJlZXN0cnVjdHVyYXIgZWwgPGVtPnNvZnR3YXJlPC9lbT4gZXhpc3RlbnRlLgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleC5wLTIgCiAgICAgICAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgICAgICAgICAgc3BhbiA0CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkNvbGFib3JhY2nDs246IDwvYj4gbG9zIGVxdWlwb3MgZGUgZGVzYXJyb2xsbyBwdWVkZW4gdHJhYmFqYXIgc2ltdWx0w6FuZWFtZW50ZSBlbiBkaWZlcmVudGVzIG3Ds2R1bG9zLgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleC5wLTIgCiAgICAgICAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgICAgICAgICAgc3BhbiA1CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkFkYXB0YWJpbGlkYWQ6IDwvYj4gbG9zIG3Ds2R1bG9zIGluZGVwZW5kaWVudGVzIGZhY2lsaXRhbiBsYSBhZGFwdGFjacOzbiBkZWwgc2lzdGVtYSBhIG51ZXZhcyB0ZWNub2xvZ8OtYXMgbyByZXF1aXNpdG9zLgogICAgICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgICBpbWcuaW1nLWZsdWlkKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMTkuc3ZnJywgc3R5bGU9Im1heC13aWR0aDo0ODZweCIsIGFsdD0iIikubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubWItNC5tYi1sZy0wCiAgICAKCiAgICBwLm1iLTUgTGFzIGNhcmFjdGVyw61zdGljYXMgZGUgdW4gYnVlbiBkaXNlw7FvIG1vZHVsYXIsIHNvbjoKCiAgICBUYWJzQy5jb2xvci1wcmltYXJpby5tYi01CiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJBbHRhIGNvaGVzacOzbiIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy00LnN2ZycpIiApCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgQWx0YSBjb2hlc2nDs24KICAgICAgICAgICAgcCBDYWRhIG3Ds2R1bG8gZGViZSBlbmZvY2Fyc2UgZW4gdW5hIHRhcmVhIGVzcGVjw61maWNhIHkgY29udGVuZXIgZWxlbWVudG9zIHJlbGFjaW9uYWRvcyBlbnRyZSBzw60uICAKICAgICAgICAgICAgcCA8Yj5FamVtcGxvOjwvYj4gdW4gbcOzZHVsbyBkZWRpY2FkbyBleGNsdXNpdmFtZW50ZSBhIGxhIGF1dGVudGljYWNpw7NuIGRlIHVzdWFyaW9zLgoKICAgICAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xLm1iLTMKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8yMC5wbmcnLCBhbHQ9JycpCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJCYWpvIGFjb3BsYW1pZW50byIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy00LnN2ZycpIiApCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgQmFqbyBhY29wbGFtaWVudG8KICAgICAgICAgICAgcCBMb3MgbcOzZHVsb3MgZGViZW4gc2VyIGxvIG3DoXMgaW5kZXBlbmRpZW50ZXMgcG9zaWJsZSwgcGVybWl0aWVuZG8gY2FtYmlhciBvIHJlZW1wbGF6YXIgdW4gbcOzZHVsbywgc2luIGFmZWN0YXIgYSBsb3MgZGVtw6FzLiAgCiAgICAgICAgICAgIHAgPGI+RWplbXBsbzo8L2I+IHVuIG3Ds2R1bG8gZGUgYmFzZSBkZSBkYXRvcyBkaXNlw7FhZG8gcGFyYSBzZXIgc3VzdGl0dWlibGUgc2luIGltcGFjdGFyIGFsIG3Ds2R1bG8gZGUgbMOzZ2ljYSBkZSBuZWdvY2lvLgogICAgICAgIAogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEubWItMwogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzIxLnBuZycsIGFsdD0nJykKCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJJbnRlcmZhY2VzIGJpZW4gZGVmaW5pZGFzIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy9pY29uLXRhYi1jLTQuc3ZnJykiICkKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBJbnRlcmZhY2VzIGJpZW4gZGVmaW5pZGFzCiAgICAgICAgICAgIHAgTG9zIG3Ds2R1bG9zIGRlYmVuIGludGVyYWN0dWFyIG1lZGlhbnRlIGludGVyZmFjZXMgY2xhcmFzIHkgY29uc2lzdGVudGVzLCBldml0YW5kbyBleHBvbmVyIGRldGFsbGVzIGludGVybm9zLiAKICAgICAgICAgICAgcCA8Yj5FamVtcGxvOjwvYj4gdW5hIEFQSSBxdWUgZmFjaWxpdGEgbGEgY29tdW5pY2FjacOzbiBlbnRyZSBsb3MgbcOzZHVsb3MgZGUgPGVtPmZyb250ZW5kPC9lbT4geSA8ZW0+YmFjay1lbmQ8L2VtPi4KCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQub3JkZXItMS5tYi0zCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMjIucG5nJywgYWx0PScnLCBzdHlsZT0id2lkdGg6IDEwMCU7IikKCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJFbmNhcHN1bGFjacOzbiIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy00LnN2ZycpIiApCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgRW5jYXBzdWxhY2nDs24KICAgICAgICAgICAgcCBMb3MgZGV0YWxsZXMgaW50ZXJub3MgZGUgdW4gbcOzZHVsbywgZGViZW4gZXN0YXIgb2N1bHRvcyBwYXJhIG90cm9zIG3Ds2R1bG9zLiAgCiAgICAgICAgICAgIHAgPGI+RWplbXBsbzo8L2I+IHVuYSBjbGFzZSBxdWUgb2N1bHRhIGxhIGzDs2dpY2EgZGUgdW4gYWxnb3JpdG1vIHkgZXhwb25lIHNvbG8gbcOpdG9kb3MgcMO6YmxpY29zIHBhcmEgaW50ZXJhY3R1YXIgY29uIGVsbGEuCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQub3JkZXItMS5tYi0zCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMjMucG5nJywgYWx0PScnLCBzdHlsZT0id2lkdGg6IDEwMCU7IikKICAgIAogICAgaDIubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEVqZW1wbG8gZGVsIHByaW5jaXBpbyBkZSBtb2R1bGFyaWRhZAoKICAgIHAubWItNSBFbiB1biBzaXN0ZW1hIHNpbiBtb2R1bGFyaWRhZCwgZnVuY2lvbmFsaWRhZGVzIGNvbW8gYXV0ZW50aWNhY2nDs24sIGdlc3Rpw7NuIGRlIHVzdWFyaW9zIHkgbMOzZ2ljYSBkZSBuZWdvY2lvLCBwb2Ryw61hbiBlbmNvbnRyYXJzZSBlbiB1biDDum5pY28gYXJjaGl2bywgbG8gcXVlIGRpZmljdWx0YSBlbCBtYW50ZW5pbWllbnRvLiBQb3IgZWwgY29udHJhcmlvLCB1biBkaXNlw7FvIG1vZHVsYXIsIHNlcGFyYSBlc3RhcyBmdW5jaW9uYWxpZGFkZXMgZW4gbcOzZHVsb3MgaW5kZXBlbmRpZW50ZXM6CgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5iZy1oODUtMi5tYi01CiAgICAgIC5jb2wtbGctMTIKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTMKICAgICAgICAgICAgb2wubGlzdGEtb2wtLWN1YWRybyhkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgICAgICAgbGkuZC1mbGV4LnAtNAogICAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgICAgICBzcGFuIDEKICAgICAgICAgICAgICAgIHAubWItMCBVbiBtw7NkdWxvIHBhcmEgbGEgYXV0ZW50aWNhY2nDs24gZGUgdXN1YXJpb3MuCiAgICAgICAgICAgICAgbGkuZC1mbGV4LnAtNCAKICAgICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgICAgc3BhbiAyCiAgICAgICAgICAgICAgICBwLm1iLTAgVW4gbcOzZHVsbyBwYXJhIGxhIGdlc3Rpw7NuIGRlIHBlcmZpbGVzLgogICAgICAgICAgICAgIGxpLmQtZmxleC5wLTQgCiAgICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICAgIHNwYW4gMwogICAgICAgICAgICAgICAgcC5tYi0wIFVuIG3Ds2R1bG8gcGFyYSBsYSBsw7NnaWNhIGRlIG5lZ29jaW8uCiAgICAgICAgICAgIHAubWItMCBDYWRhIG3Ds2R1bG8gaW50ZXJhY3TDumEgbWVkaWFudGUgaW50ZXJmYWNlcyBjbGFyYXMsIGxvIHF1ZSBtaW5pbWl6YSBlbCBpbXBhY3RvIGRlIGxvcyBjYW1iaW9zIGVuIHVuIG3Ds2R1bG8gc29icmUgbG9zIGRlbcOhcy4gICAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICBpbWcuaW1nLWZsdWlkKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMjQuc3ZnJywgc3R5bGU9Im1heC13aWR0aDo0ODZweCIsIGFsdD0iIikubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubWItNC5tYi1sZy0wCiAgICAKICAgIHAubWItNSBMYSBtb2R1bGFyaWRhZCBlbiBlbCBkaXNlw7FvIGRlIHNpc3RlbWFzICxvZnJlY2UgdGFudG8gdmVudGFqYXMgY29tbyBkZXN2ZW50YWphcywgcXVlIGRlYmVuIGNvbnNpZGVyYXJzZSBjdWlkYWRvc2FtZW50ZS4gCgoKICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tc2xpZGVyLm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBmaWd1cmUKICAgICAgICAgIC52aWRlbwogICAgICAgICAgICBpZnJhbWUod2lkdGg9IjU2MCIgaGVpZ2h0PSIzMTUiIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvMmUzVjNaOURYZ2M/c2k9U09TcHpnNzdnTXBJR2RpdCIgdGl0bGU9IllvdVR1YmUgdmlkZW8gcGxheWVyIiBmcmFtZWJvcmRlcj0iMCIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiIGFsbG93ZnVsbHNjcmVlbikKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0yLm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yNS5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgLmNvbC1sZyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICAgIHAubWItMCBFbCBwcmluY2lwaW8gZGUgbW9kdWxhcmlkYWQgZXMgZXNlbmNpYWwgcGFyYSBjb25zdHJ1aXIgc2lzdGVtYXMgZGUgPGVtPnNvZnR3YXJlPC9lbT4gbWFudGVuaWJsZXMgeSBlc2NhbGFibGVzLiBEaXZpZGlyIHVuIHNpc3RlbWEgZW4gbcOzZHVsb3MgZnVuY2lvbmFsZXMgY29uIGFsdGEgY29oZXNpw7NuIHkgYmFqbyBhY29wbGFtaWVudG8sIHBlcm1pdGUgZ2VzdGlvbmFyIGxhIGNvbXBsZWppZGFkIGRlbCBkZXNhcnJvbGxvIHkgZmFjaWxpdGEgc3UgZXZvbHVjacOzbi4gU2luIGVtYmFyZ28sIGVzIGNydWNpYWwgZXF1aWxpYnJhciBsYSBjYW50aWRhZCB5IHRhbWHDsW8gZGUgbG9zIG3Ds2R1bG9zLCBwYXJhIGV2aXRhciBjb21wbGljYWNpb25lcyBpbm5lY2VzYXJpYXMuIEVzdGUgcHJpbmNpcGlvIGVzIHVuIGZ1bmRhbWVudG8gZGUgbWV0b2RvbG9nw61hcyBtb2Rlcm5hcyBjb21vIGxhIHByb2dyYW1hY2nDs24gb3JpZW50YWRhIGEgb2JqZXRvcywgbGEgYXJxdWl0ZWN0dXJhIGJhc2FkYSBlbiBtaWNyb3NlcnZpY2lvcyB5IGxhcyBwcsOhY3RpY2FzIGRlIGRlc2Fycm9sbG8gw6FnaWwuCgoKCiAgCgoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2xjL3RlY25vbG9naWNhZGVsb3JpZW50ZS90aXR1bG9zLzY4OTEzICIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEVjaGV2ZXJyaSwgSi4gQXJpc3RpesOhYmFsLCBNLiAmIEdvbnrDoWxleiwgTC4gKDIwMTMpLiBSZWZsZXhpb25lcyBzb2JyZSBpbmdlbmllcsOtYSBkZSByZXF1aXNpdG9zIHkgcHJ1ZWJhcyBkZSA8ZW0+c29mdHdhcmU8L2VtPi4gQ29ycG9yYWNpw7NuIFVuaXZlcnNpdGFyaWEgUmVtaW5ndG9uLiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGJsb2dkZWxwcm9ncmFtYWRvci5jb20vI2dzYy50YWI9MCAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBFbCBCbG9nIERlbCBQcm9ncmFtYWRvci4KICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cuZXVyb2lubm92YS5jb20vaHR0cHM6Ly93d3cuYXV0b2Rlc2suY29tL3NvbHV0aW9ucy9nZW5lcmF0aXZlLWRlc2lnbi1haS08ZW0+c29mdHdhcmU8L2VtPj9tc29ja2lkPTI3MzIyZWQ4ZmIyODY2NDUwMDJhM2E4NWZhODc2N2NiIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgQXV0b2Rlc2sgR2VuZXJhdGl2ZSBEZXNpZ24uCiAgICAgICAgICAgIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9U1R3OHJLREZNYVEiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBDYW5hcmlhcyBKUy4gKDIwMTkpLiBTaW1wbGljaWRhZCB5IG90cm9zIHByaW5jaXBpb3MgZGVsIGRpc2XDsW8gZGUgPGVtPnNvZnR3YXJlPC9lbT4uIAoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQoK"},null]}
{"remainingRequest":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/src/views/curso/Tema1.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/src/views/curso/Tema1.vue","mtime":1758494003885},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_de_Software/U2_Fundamentos_de_Software/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVGVtYTEnLAogIGRhdGE6ICgpID0+ICh7fSksCgogIG1vdW50ZWQoKSB7CiAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgIHRoaXMuJGFvc1JlZnJlc2goKQogICAgfSkKICB9LAp9Cg=="},{"version":3,"sources":["Tema1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsXA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Tema1.vue","sourceRoot":"src/views/curso","sourcesContent":["<template lang=\"pug\">\n.curso-main-container.pb-3\n  BannerInterno(:subTitulo=\"'1. Principios de diseño (cohesión, acoplamiento, modularidad)'\")\n  .container.tarjeta.tarjeta--blanca.p-4.p-md-5.overflow-hidden\n\n    .bg-color-10.mb-5(data-aos=\"fade-up\")\n      .row.justify-content-center.align-items-center\n        .col-lg-auto\n          figure\n            img(src='@/assets/curso/tema1/1.png', alt='')\n        .col-lg\n          .p-4\n            p.mb-0(data-aos=\"fade-up\") El diseño de <em>software</em>, constituye un pilar esencial en el desarrollo de sistemas tecnológicos que sean funcionales, escalables y de fácil mantenimiento. Aplicar principios sólidos como cohesión, acoplamiento y modularidad, asegura que las soluciones cumplan con los objetivos actuales y puedan adaptarse a necesidades futuras. A continuación, se detalla cada uno de estos principios, destacando su significado, importancia, beneficios y aplicaciones prácticas.\n    \n    h2.mb-3(data-aos=\"fade-right\") Principio de cohesión en el diseño de <em>software</em>\n\n    .row.mb-5.justify-content-center.align-items-center\n      .col-md-8.col-lg-4.order-2\n        figure\n          img(src=\"@/assets/curso/tema1/2.png\", data-aos=\"zoom-in\")\n      .col-lg-8.order-1\n        .bg-color-1.p-4(data-aos=\"fade-left\").mb-3.mb-lg-0\n          .row.align-items-center\n            .col-lg-auto\n              img(src=\"@/assets/curso/tema1/3.svg\", style=\"max-width: 90px\").mx-auto\n            .col-lg\n              p.mb-0 La cohesión mide el nivel de relación entre las responsabilidades dentro de un módulo. Un módulo cohesivo concentra funciones y datos que trabajan en conjunto, para un propósito único. Este principio mejora la mantenibilidad, escalabilidad y comprensión del <em>software</em>.\n      \n    h2.mb-3(data-aos=\"fade-right\") Definición y propósito de la cohesión\n\n    p.mb-5 La cohesión evalúa qué tan relacionadas están las partes de un módulo. En un diseño cohesivo, funciones y datos están alineados con un objetivo único, lo que elimina responsabilidades dispersas. Un módulo cohesivo:\n\n    .row.mb-5\n      .col-lg-4.mb-3.mb-lg-0(data-aos=\"fade-up\")\n        div.bg-color-5.h-100.p-4.tarjeta\n          h2 01\n          p.mb-0.text-center <b>Tiene un propósito claro: </b> cada función contribuye a un objetivo común.\n      .col-lg-4.mb-3.mb-lg-0(data-aos=\"fade-down\")\n        div.bg-color-4.h-100.p-4.tarjeta\n          h2 02\n          p.mb-0.text-center <b>Reduce la complejidad interna: </b> al enfocarse en tareas específicas, minimiza interacciones innecesarias.\n      .col-lg-4(data-aos=\"fade-up\")\n        div.bg-color-5.h-100.p-4.tarjeta\n          h2 03\n          p.mb-0.text-center <b>Facilita el mantenimiento: </b> delimita áreas de trabajo claras.\n    \n    #t_1_1.titulo-segundo(data-aos=\"flip-up\")\n      h2 #[span 1.1] Tipos de cohesión\n\n    p.mb-5 La cohesión se clasifica en una escala de baja a alta, según la relación entre los elementos del módulo:\n\n    .bg-full-width.bg-fondo-2\n      .px-4.px-md-5.pb-md-3\n        .row.justify-content-center.mb-5\n          .col-lg-8.order-2\n            SlyderF(columnas=\"col-12 col-lg-6\")(data-aos=\"zoom-in\")\n        \n              .row.py-4.px-3.h-100\n                .col-10.offset-1.offset-md-0.col-md-12.shadow-app.p-3.py-md-5.px-md-4.bg-8.tarjeta.bg-color-white\n                  img(src='@/assets/curso/tema1/5.svg' alt='AvatarTop' , style=\"max-width: 90px\").mx-auto.mb-3\n                  h4.text-center.mb-4 Cohesión coincidente\n                  p.mb-0.text-center Los elementos están agrupados sin relación clara. \n                  p.mb-0.text-center <b>Ejemplo:</b> un módulo que gestiona usuarios, calcula precios y procesa pagos. \n                  p.mb-0.text-center <b>Impacto:</b> dificulta el mantenimiento y comprensión.\n   \n              .row.py-4.px-3.h-100\n                .col-10.offset-1.offset-md-0.col-md-12.shadow-app.p-3.py-md-5.px-md-4.bg-8.tarjeta.bg-color-white\n                  img(src='@/assets/curso/tema1/6.svg' alt='AvatarTop' , style=\"max-width: 90px\").mx-auto.mb-3\n                  h4.text-center.mb-4 Cohesión lógica\n                  p.text-center.mb-0 Los elementos realizan tareas similares, pero no están conectados funcionalmente.  \n                  p.text-center.mb-0 <b>Ejemplo:</b> un módulo para leer, escribir y modificar diferentes tipos de archivos.\n              .row.py-4.px-3.h-100\n                .col-10.offset-1.offset-md-0.col-md-12.shadow-app.p-3.py-md-5.px-md-4.bg-8.tarjeta.bg-color-white\n                  img(src='@/assets/curso/tema1/7.svg' alt='AvatarTop' , style=\"max-width: 90px\").mx-auto.mb-3\n                  h4.text-center.mb-4 Cohesión temporal\n                  p.text-center.mb-0 Agrupa funciones por ejecución en la misma secuencia temporal. \n                  p.text-center.mb-0 <b>Ejemplo:</b> inicialización de variables y apertura de conexiones.\n              .row.py-4.px-3.h-100\n                .col-10.offset-1.offset-md-0.col-md-12.shadow-app.p-3.py-md-5.px-md-4.bg-8.tarjeta.bg-color-white\n                  img(src='@/assets/curso/tema1/8.svg' alt='AvatarTop' , style=\"max-width: 90px\").mx-auto.mb-3\n                  h4.text-center.mb-4 Cohesión funcional\n                  p.text-center.mb-0 Todos los elementos trabajan en conjunto, para una tarea específica \n                  p.text-center.mb-0 <b>Ejemplo:</b> un módulo que gestiona reservas en un hotel.         \n\n          .col-md-8.col-lg-4.order-1\n            figure\n              img(src='@/assets/curso/tema1/4.png', alt='')\n    \n        h2.mb-3(data-aos=\"fade-right\") Importancia de la cohesión en el diseño de <em>software</em>\n\n        p.mb-5 La cohesión impacta directamente la calidad del diseño. Los beneficios incluyen:\n\n    .row.justify-content-center.align-items-center.bg-h85.mb-5\n      .col-lg-12\n        .row.justify-content-center.align-items-center\n          .col-lg-7(data-aos=\"fade-left\")\n            ol.lista-ol--cuadro(data-aos=\"fade-up\").mb-0\n              li.mb-0.d-flex.p-2\n                .lista-ol--cuadro__vineta\n                  span 1\n                p.mb-0 <b>Facilidad de comprensión: </b> los módulos cohesivos son claros y fáciles de entender.\n              li.mb-0.d-flex.p-2 \n                .lista-ol--cuadro__vineta\n                  span 2\n                p.mb-0 <b>Mantenimiento optimizado:</b> sus responsabilidades bien definidas, facilitan modificaciones.\n              li.mb-0.d-flex.p-2 \n                .lista-ol--cuadro__vineta\n                  span 3\n                p.mb-0 <b>Reutilización de código: </b>pueden extraerse y utilizarse en otros proyectos.\n              li.mb-0.d-flex.p-2 \n                .lista-ol--cuadro__vineta\n                  span 4\n                p.mb-0 <b>Reducción de errores:  </b> se minimizan interacciones complejas, que provocan fallos.\n          .col-lg-5(data-aos=\"zoom-in\")\n            img.img-fluid(src='@/assets/curso/tema1/9.svg', style=\"max-width:486px\", alt=\"\").mx-auto.mx-lg-0.ms-lg-auto.mb-4.mb-lg-0\n\n    h2.mb-3(data-aos=\"fade-right\") Cómo lograr alta cohesión\n\n    p.mb-5 Lograr alta cohesión requiere estrategias específicas:\n\n    .bg-full-width.bg-fondo-3\n      .px-4.px-md-5.pb-md-3\n        div.row.justify-content-center.align-items-stretch.mb-5\n          div.col-lg-3.mb-4(data-aos=\"zoom-in-up\")\n            div.bg-color-white.box-shadow.px-4.py-5.h-100.tarjeta\n              img.mx-auto.d-block.mb-4(\n                src=\"@/assets/curso/tema1/10.svg\"\n                alt=\"\"\n                style=\"width: 90px\"\n              )\n              p.text-bold.text-center Definir el propósito del módulo\n              p.mb-0.text-center Identificar claramente su objetivo.\n          \n          div.col-lg-3.mb-4(data-aos=\"zoom-in-up\")\n            div.bg-color-white.box-shadow.px-4.py-5.h-100.tarjeta\n              img.mx-auto.d-block.mb-4(\n                src=\"@/assets/curso/tema1/11.svg\"\n                alt=\"\"\n                style=\"width: 90px\"\n              )\n              p.text-bold.text-center Evitar agregar funciones no relacionadas\n              p.mb-0.text-center Distribuir responsabilidades entre módulos distintos.\n          \n          div.col-lg-3.mb-4(data-aos=\"zoom-in-up\")\n            div.bg-color-white.box-shadow.px-4.py-5.h-100.tarjeta\n              img.mx-auto.d-block.mb-4(\n                src=\"@/assets/curso/tema1/12.svg\"\n                alt=\"\"\n                style=\"width: 90px\"\n              )\n              p.text-bold.text-center Aplicar principios de diseño SOLID\n              p.mb-0.text-center En especial, el principio de responsabilidad única.\n          div.col-lg-3.mb-4(data-aos=\"zoom-in-up\")\n            div.bg-color-white.box-shadow.px-4.py-5.h-100.tarjeta\n              img.mx-auto.d-block.mb-4(\n                src=\"@/assets/curso/tema1/13.svg\"\n                alt=\"\"\n                style=\"width: 90px\"\n              )\n              p.text-bold.text-center Revisar y refactorizar\n              p.mb-0.text-center Asegurar que cada función contribuya al propósito del módulo.\n\n        .row.justify-content-center.align-items-center.bg-h85-2.mb-5\n          .col-lg-12\n            .row.justify-content-center.align-items-center\n              .col-lg-7(data-aos=\"fade-left\").mb-3.mb-lg-0\n                p.text-bold(data-aos=\"fade-right\") Ejemplo práctico: cohesión en un sistema de gestión escolar\n                p.mb-0 Un módulo cohesivo para la gestión de estudiantes incluiría funciones como registrar información, actualizar datos y consultar calificaciones. En cambio, un módulo no cohesivo que incluya asignar horarios a profesores o procesar pagos de matrícula, sería difícil de mantener.\n              .col-lg-5(data-aos=\"zoom-in\")\n                img.img-fluid(src='@/assets/curso/tema1/14.svg', style=\"max-width:486px\", alt=\"\").mx-auto.mx-lg-0.ms-lg-auto.mb-4.mb-lg-0\n    \n    p.mb-5 La cohesión fomenta claridad, sostenibilidad y mejora la colaboración en equipo. Diseñar módulos cohesivos garantiza que el sistema pueda evolucionar fácilmente.\n\n    .bg-full-width.bg-color-9.mb\n      .px-4.p-md-5\n        .row.justify-content-center.align-items-center\n          .col-lg-8.order-2\n            h2.mb-4(data-aos=\"flip-up\") Principio de acoplamiento en el diseño de <em>software</em>\n            p.mb-4(data-aos=\"fade-right\") El documento se centra en el principio de acoplamiento en el diseño de <em>software</em>, destacando su importancia para lograr sistemas modulares, mantenibles y escalables. Se describen los niveles de acoplamiento, desde el ideal desacoplamiento completo hasta el menos deseable acoplamiento de contenido, ofreciendo ejemplos para ilustrar cada tipo.\n\n            a.anexo.mb-4.bg-white.w-fit(:href=\"obtenerLink('/downloads/Anexo_1.pdf')\" target=\"_blank\")(data-aos=\"flip-up\")\n              .anexo__icono(:style=\"{'background-color': '#FCDFDB'}\")\n                img(src=\"@/assets/template/icono-pdf.svg\")\n              .anexo__texto\n                p <strong>Anexo. </strong> Principio de acoplamiento en el diseño de <em>software</em>.\n\n          .col-md-8.col-lg-4.order-1.mb-3.mb-lg-0\n            figure(data-aos=\"zoom-in\")\n              img(src='@/assets/curso/tema1/15.png', alt='')\n    \n\n    #t_1_2.titulo-segundo(data-aos=\"flip-up\").mt-5\n      h2 #[span 1.2] Principio de modularidad en el diseño de <em>software</em>\n\n    .row.mb-5.justify-content-center.align-items-center\n      .col-md-8.col-lg-4.order-2\n        figure\n          img(src=\"@/assets/curso/tema1/16.png\", data-aos=\"zoom-in\")\n      .col-lg-8.order-1\n        p El principio de modularidad es un enfoque esencial en el diseño de <em>software</em>, que busca dividir un sistema complejo en partes más pequeñas y manejables, llamadas módulos. Cada módulo tiene una función específica y está diseñado para ser independiente o, al menos, para mantener una dependencia mínima con otros módulos. Este enfoque facilita el desarrollo, mantenimiento y evolución del <em>software</em>, mejorando su calidad.\n        .bg-color-1.p-4(data-aos=\"fade-left\").mb-3.mb-lg-0\n          .row.align-items-center\n            .col-lg-auto\n              img(src=\"@/assets/curso/tema1/17.svg\", style=\"max-width: 90px\").mx-auto\n            .col-lg\n              p.mb-0 La modularidad se define como la capacidad de un sistema para dividirse en componentes funcionales autónomos, que trabajan juntos para cumplir los objetivos generales. Un módulo es una unidad lógica, conceptual o física, que agrupa elementos relacionados, como funciones, datos o clases, y opera como una entidad separada.\n    \n    h2.mb-3(data-aos=\"fade-right\") Propiedades claves de un módulo\n\n    p.mb-5 Los módulos son componentes esenciales en el desarrollo de sistemas, definidos por propiedades claves que aseguran su funcionalidad y eficiencia.\n\n    .bg-full-width-1.bg-fondo-2\n      .px-4.px-md-5.pb-md-3\n        .row.justify-content-center.mb-3\n          .col-lg-8\n            figure\n              img(src=\"@/assets/curso/tema1/18.svg\", data-aos=\"zoom-in\") \n        \n        h2.mb-3(data-aos=\"fade-right\") Importancia de la modularidad\n\n        p.mb-5 La modularidad es un principio clave en el desarrollo de sistemas, por los múltiples beneficios que aporta.\n\n        .row.justify-content-center.align-items-center.bg-h85-4.mb-5\n          .col-lg-12\n            .row.justify-content-center.align-items-center\n              .col-lg-7(data-aos=\"fade-left\")\n                ol.lista-ol--cuadro(data-aos=\"fade-up\").mb-0\n                  li.mb-0.d-flex.p-2\n                    .lista-ol--cuadro__vineta\n                      span 1\n                    p.mb-0 <b>Mantenibilidad: </b> facilita la localización y corrección de errores, además de implementar cambios.\n                  li.mb-0.d-flex.p-2 \n                    .lista-ol--cuadro__vineta\n                      span 2\n                    p.mb-0 <b>Reutilización: </b> los módulos bien diseñados pueden utilizarse en otros proyectos o partes del sistema, ahorrando tiempo y esfuerzo.\n                  li.mb-0.d-flex.p-2 \n                    .lista-ol--cuadro__vineta\n                      span 3\n                    p.mb-0 <b>Escalabilidad: </b>permite agregar nuevas funcionalidades sin reestructurar el <em>software</em> existente.\n                  li.mb-0.d-flex.p-2 \n                    .lista-ol--cuadro__vineta\n                      span 4\n                    p.mb-0 <b>Colaboración: </b> los equipos de desarrollo pueden trabajar simultáneamente en diferentes módulos.\n                  li.mb-0.d-flex.p-2 \n                    .lista-ol--cuadro__vineta\n                      span 5\n                    p.mb-0 <b>Adaptabilidad: </b> los módulos independientes facilitan la adaptación del sistema a nuevas tecnologías o requisitos.\n              .col-md-8.col-lg-5(data-aos=\"zoom-in\")\n                img.img-fluid(src='@/assets/curso/tema1/19.svg', style=\"max-width:486px\", alt=\"\").mx-auto.mx-lg-0.ms-lg-auto.mb-4.mb-lg-0\n    \n\n    p.mb-5 Las características de un buen diseño modular, son:\n\n    TabsC.color-primario.mb-5\n      .tabs-content.border.px-4.p-md-5.py-3(titulo=\"Alta cohesión\" :icon=\"require('@/assets/bullets/icon-tab-c-4.svg')\" )\n        .row.justify-content-center\n          .col-lg-7.col-xl-8.mb-4.mb-md-0.order-2\n            h4 Alta cohesión\n            p Cada módulo debe enfocarse en una tarea específica y contener elementos relacionados entre sí.  \n            p <b>Ejemplo:</b> un módulo dedicado exclusivamente a la autenticación de usuarios.\n\n        \n          .col-md-8.col-lg-5.col-xl-4.order-1.mb-3\n            figure(data-aos=\"zoom-in\")\n              img(src='@/assets/curso/tema1/20.png', alt='')\n      .tabs-content.border.px-4.p-md-5.py-3(titulo=\"Bajo acoplamiento\" :icon=\"require('@/assets/bullets/icon-tab-c-4.svg')\" )\n        .row.justify-content-center\n          .col-lg-7.col-xl-8.mb-4.mb-md-0.order-2\n            h4 Bajo acoplamiento\n            p Los módulos deben ser lo más independientes posible, permitiendo cambiar o reemplazar un módulo, sin afectar a los demás.  \n            p <b>Ejemplo:</b> un módulo de base de datos diseñado para ser sustituible sin impactar al módulo de lógica de negocio.\n        \n          .col-md-8.col-lg-5.col-xl-4.order-1.mb-3\n            figure(data-aos=\"zoom-in\")\n              img(src='@/assets/curso/tema1/21.png', alt='')\n\n      .tabs-content.border.px-4.p-md-5.py-3(titulo=\"Interfaces bien definidas\" :icon=\"require('@/assets/bullets/icon-tab-c-4.svg')\" )\n        .row.justify-content-center\n          .col-lg-7.col-xl-8.mb-4.mb-md-0.order-2\n            h4 Interfaces bien definidas\n            p Los módulos deben interactuar mediante interfaces claras y consistentes, evitando exponer detalles internos. \n            p <b>Ejemplo:</b> una API que facilita la comunicación entre los módulos de <em>frontend</em> y <em>back-end</em>.\n\n          .col-md-8.col-lg-5.col-xl-4.order-1.mb-3\n            figure(data-aos=\"zoom-in\")\n              img(src='@/assets/curso/tema1/22.png', alt='', style=\"width: 100%;\")\n\n      .tabs-content.border.px-4.p-md-5.py-3(titulo=\"Encapsulación\" :icon=\"require('@/assets/bullets/icon-tab-c-4.svg')\" )\n        .row.justify-content-center\n          .col-lg-7.col-xl-8.mb-4.mb-md-0.order-2\n            h4 Encapsulación\n            p Los detalles internos de un módulo, deben estar ocultos para otros módulos.  \n            p <b>Ejemplo:</b> una clase que oculta la lógica de un algoritmo y expone solo métodos públicos para interactuar con ella.\n          .col-md-8.col-lg-5.col-xl-4.order-1.mb-3\n            figure(data-aos=\"zoom-in\")\n              img(src='@/assets/curso/tema1/23.png', alt='', style=\"width: 100%;\")\n    \n    h2.mb-3(data-aos=\"fade-right\") Ejemplo del principio de modularidad\n\n    p.mb-5 En un sistema sin modularidad, funcionalidades como autenticación, gestión de usuarios y lógica de negocio, podrían encontrarse en un único archivo, lo que dificulta el mantenimiento. Por el contrario, un diseño modular, separa estas funcionalidades en módulos independientes:\n\n    .row.justify-content-center.align-items-center.bg-h85-2.mb-5\n      .col-lg-12\n        .row.justify-content-center.align-items-center\n          .col-lg-7(data-aos=\"fade-left\").mb-3\n            ol.lista-ol--cuadro(data-aos=\"fade-up\")\n              li.d-flex.p-4\n                .lista-ol--cuadro__vineta\n                  span 1\n                p.mb-0 Un módulo para la autenticación de usuarios.\n              li.d-flex.p-4 \n                .lista-ol--cuadro__vineta\n                  span 2\n                p.mb-0 Un módulo para la gestión de perfiles.\n              li.d-flex.p-4 \n                .lista-ol--cuadro__vineta\n                  span 3\n                p.mb-0 Un módulo para la lógica de negocio.\n            p.mb-0 Cada módulo interactúa mediante interfaces claras, lo que minimiza el impacto de los cambios en un módulo sobre los demás.          \n          .col-md-8.col-lg-5(data-aos=\"zoom-in\")\n            img.img-fluid(src='@/assets/curso/tema1/24.svg', style=\"max-width:486px\", alt=\"\").mx-auto.mx-lg-0.ms-lg-auto.mb-4.mb-lg-0\n    \n    p.mb-5 La modularidad en el diseño de sistemas ,ofrece tanto ventajas como desventajas, que deben considerarse cuidadosamente. \n\n\n    \n    .bg-full-width.bg-fondo-slider.mb-5\n      .p-4.p-md-5\n        figure\n          .video\n            iframe(width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2e3V3Z9DXgc?si=SOSpzg77gMpIGdit\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen)\n\n    .bg-full-width.bg-color-2.mb-5\n      .px-4.px-md-5.py-4\n        .row.align-items-center\n          .col-lg-auto\n            img(src=\"@/assets/curso/tema1/25.svg\", style=\"max-width: 90px\").mx-auto\n          .col-lg(data-aos=\"fade-right\")\n            p.mb-0 El principio de modularidad es esencial para construir sistemas de <em>software</em> mantenibles y escalables. Dividir un sistema en módulos funcionales con alta cohesión y bajo acoplamiento, permite gestionar la complejidad del desarrollo y facilita su evolución. Sin embargo, es crucial equilibrar la cantidad y tamaño de los módulos, para evitar complicaciones innecesarias. Este principio es un fundamento de metodologías modernas como la programación orientada a objetos, la arquitectura basada en microservicios y las prácticas de desarrollo ágil.\n\n\n\n  \n\n\n    .bg-full-width.border-top.color-primario\n      .p-4.p-md-5\n        h2(data-aos=\"fade-left\") MATERIAL COMPLEMENTARIO\n        .row.material-complementario\n          .col-12.col-md-6.col-lg-7\n            p Los invitamos a explorar el material complementario de este curso, en esta sección encontrará recursos que le permitirán profundizar  y enriquecer su aprendizaje en los temas tratados en esta unidad.\n\n            p.d-flex.my-4\n              img.me-3(src='@/assets/componentes/link.svg' :style=\"{'max-width':'16px'}\")\n              a(href=\"https://elibro.net/es/lc/tecnologicadeloriente/titulos/68913 \" target=\"_blank\" rel=\"noopener noreferrer\") Echeverri, J. Aristizábal, M. & González, L. (2013). Reflexiones sobre ingeniería de requisitos y pruebas de <em>software</em>. Corporación Universitaria Remington. \n            p.d-flex.my-4\n              img.me-3(src='@/assets/componentes/link.svg' :style=\"{'max-width':'16px'}\")\n              a(href=\"https://elblogdelprogramador.com/#gsc.tab=0 \" target=\"_blank\" rel=\"noopener noreferrer\") El Blog Del Programador.\n            p.d-flex.my-4\n              img.me-3(src='@/assets/componentes/link.svg' :style=\"{'max-width':'16px'}\")\n              a(href=\"https://www.euroinnova.com/https://www.autodesk.com/solutions/generative-design-ai-<em>software</em>?msockid=27322ed8fb286645002a3a85fa8767cb\" target=\"_blank\" rel=\"noopener noreferrer\") Autodesk Generative Design.\n            \n\n            p.d-flex.my-4\n              img.me-3(src='@/assets/template/icono-yt.svg' :style=\"{'max-width':'16px'}\")\n              a(href=\"https://www.youtube.com/watch?v=STw8rKDFMaQ\" target=\"_blank\" rel=\"noopener noreferrer\") Canarias JS. (2019). Simplicidad y otros principios del diseño de <em>software</em>. \n\n          .col-12.col-md-6.col-lg-3.offset-lg-1\n            figure\n              img(src='@/assets/componentes/material-complementario.svg', alt='')\n\n</template>\n\n<script>\nexport default {\n  name: 'Tema1',\n  data: () => ({}),\n\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n"]}]}